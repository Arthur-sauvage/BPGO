import logging
import streamlit as st

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(pathname)s - %(funcName)s - %(message)s",
)


PRODUITS = """
Affacturage :
- Flash Factures : Solution de financement √† la Facture 100% digitale.

Changement de Devises :
- Change Dynamique sur TPE : Solution de change de devises.

D√©veloppement durable :
- Pr√™t Mobilit√© Verte : Pr√™t pour l'achat de v√©hicules propres et/ou les bornes de rechargement.
- Pr√™t R√©novation Energ√©tique : Pr√™t d'√©quipement MLT permettant de financer des travaux de r√©novation √©nerg√©tique.
"""




def display_propositions_produits(data_analysis):
    if "produits" not in st.session_state:
        st.session_state.produits = {
                    "Ventes Fuel :": [["Financement pour la mise en conformit√© avec les r√©glementations environnementales.", "Pr√™t Mobilit√© Verte : Pr√™t pour l'achat de v√©hicules propres et/ou les bornes de rechargement."]],
                    "Financement des investissements :": [["Financement sp√©cifique pour renouveler l'outil industriel us√© et maintenir la comp√©titivit√©.", "Pr√™t Relais Equipement Pro : Solution de cr√©dit √† court terme pour financer un projet Professionnel."], ["Besoin de financement √† long terme pour de nouvelles immobilisations pour soutenir l'expansion.", "CREDIT BAIL MOBILIER : Op√©ration de location d‚Äôun bien mobilier √† usage professionnel"]],
                    "Optimisation de la Tr√©sorerie :": [["Proposition de solutions pour r√©mun√©rer la Tr√©sorerie exc√©dentaire.", "Livret Optiplus Tr√©so : Destin√© √† r√©mun√©rer la tr√©sorerie professionnelle exc√©dentaire des professionnels."]],
                    "Planification successorale et de retraite pour les propri√©taires d'entreprises :": [["Service de planification de la succession pour assurer une transition en douceur de la direction de l'entreprise.", "Garanties de Passif : Engagement par signature de la Banque, dans le cadre d‚Äôune cession d‚Äôentreprise"]],
                    }


    if "validated_produits" not in st.session_state:
        st.session_state.validated_produits = {}


    for titre in st.session_state.validated_besoins.keys():
        with st.expander(f"**{titre.replace(':', '').strip()}**", True):
            if titre in st.session_state.validated_produits.keys():
                for besoin, produit in st.session_state.validated_produits[titre]:
                    if f"- {besoin}" in st.session_state.validated_besoins[titre]:
                        my_cols = st.columns(2)
                        my_cols[0].success(besoin.replace("-", " "))
                        my_cols[1].success(produit)
            if titre in st.session_state.produits.keys():
                for besoin, produit in st.session_state.produits[titre]:
                    if f"- {besoin}" in st.session_state.validated_besoins[titre]:
                        my_cols = st.columns((3, 3, 1))
                        my_cols[0].success(besoin.replace("-", " "))
                        my_cols[1].info(produit)
                        if my_cols[2].button("üõí", key=f"add_{titre}_{produit}"):
                            if titre not in st.session_state.validated_produits:
                                st.session_state.validated_produits[titre] = [[besoin, produit]]
                            else:
                                st.session_state.validated_produits[titre].append([besoin, produit])
                            st.session_state.produits[titre].remove([besoin, produit])
                            st.rerun()
            else:
                st.write(st.session_state.produits.keys())



    if st.button("Etape suivante", key="next_step_produits"):
        st.session_state["validated_products"] = True
        st.success("Produits valid√©s avec succ√®s")
        st.rerun()